# Specify the database library used to store metric data on disk.
# Can be whisper or ceres. If you are not familiar with ceres
# it is recommended that you stick with whisper as ceres does not
# have any documentation yet, and works quite differently than whisper.
DATABASE = <%= @daemon['db']['DATABASE'] %>

# Directory in which to store metric data. This should be specific to the
# database library to avoid conflicts. So if you switch DATABASE
# to ceres, you'd switch this to /opt/graphite/storage/ceres/
LOCAL_DATA_DIR = <%= @node['graphite']['ceres_dir'] %> 


##############################
# Database-specific settings #
##############################

[ceres]
# Ceres nodes can have many slices and caching the right ones can improve
# performance dramatically. Note that there are many trade-offs to tinkering
# with this, and unless you are a ceres developer you *really* should not
# mess with this. Valid values are:
#    latest - only the most recent slice is cached
#       all - all slices are cached
#      none - slice caching is disabled
DEFAULT_SLICE_CACHING_BEHAVIOR = <%= @daemon['db']['DEFAULT_SLICE_CACHING_BEHAVIOR'] %>

# If a Ceres node accumulates too many slices, performance can suffer.
# This can be caused by intermittently reported data. To mitigate
# slice fragmentation there is a tolerance for how much space can be
# wasted within a slice file to avoid creating a new one. That tolerance
# level is determined by MAX_SLICE_GAP, which is the number of consecutive
# null datapoints allowed in a slice file.
# If you set this very low, you will waste less of the *tiny* bit disk space
# that this feature wastes, and you will be prone to performance problems
# caused by slice fragmentation, which can be pretty severe.
# If you set this really high, you will waste a bit more disk space (each
# null datapoint wastes 8 bytes, but keep in mind your filesystem's block
# size). If you suffer slice fragmentation issues, you should increase this or
# run the ceres-maintenance defrag plugin more often. However you should not
# set it to be huge because then if a large but allowed gap occurs it has to
# get filled in, which means instead of a simple 8-byte write to a new file we
# could end up doing an (8 * MAX_SLICE_GAP)-byte write to the latest slice.
MAX_SLICE_GAP = <%= @daemon['db']['MAX_SLICE_GAP'] %>
